
import timeit
import random

# ------------------------------
# 1. Sample data
# ------------------------------
def make_data(n=10000):
    """Generate a sample list of dictionaries."""
    return [{"id": i, "value": random.randint(1, 100000)} for i in range(n)]

data = make_data(20000)

# ------------------------------
# 2. AI-suggested code (as if generated by GitHub Copilot)
# ------------------------------
def sort_dicts_by_key_ai(list_of_dicts, key, reverse=False):
    """
    AI-suggested function (typical Copilot output):
    Uses built-in sorted() with a simple key extraction.
    """
    return sorted(list_of_dicts, key=lambda d: d.get(key, None), reverse=reverse)

# ------------------------------
# 3. Manual implementation (written by developer)
# ------------------------------
def sort_dicts_by_key_manual(list_of_dicts, key, reverse=False):
    """
    Manual version:
    Includes input validation, handles missing keys explicitly, and uses
    a stable in-place sort to minimize memory allocation.
    """
    if not isinstance(list_of_dicts, list):
        raise TypeError("Expected a list of dictionaries")
    if not all(isinstance(d, dict) for d in list_of_dicts):
        raise ValueError("All elements must be dictionaries")

    arr = list(list_of_dicts)  # make a copy to avoid mutating the input

    def key_for(d):
        # Sort missing keys last
        return (0, d[key]) if key in d else (1, None)

    arr.sort(key=key_for, reverse=reverse)
    return arr

# ------------------------------
# 4. Validate correctness
# ------------------------------
ai_sorted = sort_dicts_by_key_ai(data, "value")
manual_sorted = sort_dicts_by_key_manual(data, "value")

assert ai_sorted == manual_sorted, "Mismatch between AI and manual sort results!"

# ------------------------------
# 5. Benchmark performance
# ------------------------------
setup_code = "from __main__ import data, sort_dicts_by_key_ai, sort_dicts_by_key_manual"

t_ai = timeit.timeit("sort_dicts_by_key_ai(data, 'value')", setup=setup_code, number=10)
t_manual = timeit.timeit("sort_dicts_by_key_manual(data, 'value')", setup=setup_code, number=10)

# ------------------------------
# 6. Print results
# ------------------------------
print("\n=== Benchmark Results ===")
print(f"AI-suggested function time:    {t_ai:.5f} seconds (10 runs)")
print(f"Manual implementation time:    {t_manual:.5f} seconds (10 runs)")

if t_ai < t_manual:
    faster = "AI-suggested version"
else:
    faster = "Manual implementation"

print(f"\nConclusion: The {faster} is more efficient in this benchmark.")

# ------------------------------
# 7. Example output preview
# ------------------------------
print("\n=== Example Sorted Output (first 5 items) ===")
for item in ai_sorted[:5]:
    print(item)
